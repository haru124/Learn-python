def compute_lps_table(pattern):
    m = len(pattern)
    lps = [0] * m
    i = 0
    j = 1
    while j < m:
        if pattern[j] == pattern[i]:
            i += 1
            lps[j] = i
            j += 1
        else:
            if i != 0:
                i = lps[i - 1]
            else:
                lps[j] = 0
                j += 1
    return lps

def kmp_string_match(text, pattern):
    n = len(text)
    m = len(pattern)
    lps = compute_lps_table(pattern)
    print(f"lps={lps}")
    occurrences = []
    i = j = 0

    while i < n:
        if pattern[j] == text[i]:
            i += 1
            j += 1

            if j == m:  # Pattern found
                occurrences.append(i - j)
                j = lps[j - 1]
        else:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1

    return occurrences

# Example usage
text = "onionionspl"
pattern = "oniobn"
matches = kmp_string_match(text, pattern)

if matches:
    print(f"Pattern '{pattern}' found at positions: {matches}")
else:
    print(f"Pattern '{pattern}' not found in the text.")
